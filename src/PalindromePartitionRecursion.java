import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

class PalindromPartitionRecursion {
    public static void main(String[] args) {
        Scanner command = new Scanner(System.in);
        System.out.println("Pleae enter a palindrome: ");
        String input = command.nextLine();

        System.out.println("All possible palindrome" +
                "partions for " + input
                + " are :");

        allPalPartitions(input);
    }

    private static void allPalPartitions(String input){
        int n = input.length();

        //To store all palindromic partitions
        ArrayList<ArrayList<String>> allPart = new ArrayList<>();
        //To store current palindromic partition
        Deque<String> currentPart = new LinkedList<String>();

        //Call recursive function to generate all partitions and store in allPart
        allPalPartitionsUtil(allPart, currentPart, 0, n, input);

        //Print all partitions generated by above call
        for (int i = 0; i < allPart.size(); i++){
            for (int j = 0; j < allPart.get(i).size(); j++){
                System.out.print(allPart.get(i).get(j) + " ");
            }
            System.out.println();
        }
    }

    //Recursive function to find all palindromic partitions of input[start..n-1] allPart --> A
    //ArrayList of DoubleQueues of strings. Every Deque inside it stores a partition currentPart --> A
    //Deque of strings to store current partition
    private static  void allPalPartitionsUtil(ArrayList<ArrayList<String>> allPart, Deque<String> currentPart, int start, int n, String input){
        //if start has reached the length
        if (start >= n){
            allPart.add(new ArrayList<>(currentPart));
            return;
        }//for loop picks all possible ending points for substrings
        for (int i = start; i < n; i++){
            //if substring str[start..i] is palindrome
            if (isPalindrome(input, start, i)){
                currentPart.addLast(input.substring(start, i+1));
                allPalPartitionsUtil(allPart, currentPart, i+1, n, input);
                currentPart.removeLast();
            }
        }
    }

    private static boolean isPalindrome(String input, int start, int i){
        while (start < i){
            if (input.charAt(start++) != input.charAt(i--))
                return false;
        }
        return true;
    }
}
